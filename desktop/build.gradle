
apply plugin: 'application'


// these environment variables are available during a Jenkins build
ext.buildNumber = System.getenv( "BUILD_NUMBER" ) ?: 'SNAPSHOT'
ext.gitCommit = System.getenv( "GIT_COMMIT" ) ?: 'HEAD'
ext.appName = 'vZome'
ext.edition = appName

description = 'vzome-desktop'

task recordBuildProperties {
    def propsFile = file( "$buildDir/buildPropsResource/build.properties" )
    ext.outputDir = propsFile .getParentFile()
    doFirst {
        writeProjectProperties( [ 'version', 'edition', 'buildNumber', 'gitCommit' ], propsFile )
        println ' recorded desktop build properties'
    }
}
processResources { 
    dependsOn recordBuildProperties
    from recordBuildProperties.outputDir
} 

// used by the 'application' plugin
// as well as the 'macappbundle' and 'launch4j' Gradle plugins in sub-projects
ext.jvmArgs = [
    "apple.laf.useScreenMenuBar": "true",
    "apple.awt.antialiasing": "true",
    "apple.awt.application.name": appName,
    "com.apple.macos.use-file-dialog-packages": "true",
    "com.apple.macos.useScreenMenuBar": "true",
    "com.apple.smallTabs": "true",
    "java.util.logging.config.file": "logging.properties" ]
ext.vzomeArgs = [  // a list, not a map
    '-entitlement.model.edit', 'true', '-entitlement.lesson.edit', 'true', '-entitlement.all.tools', 'true',
    '-licensed.user', 'whomever' ]

// used by both 'application' and 'launch4j' Gradle plugins
mainClassName = 'org.vorthmann.zome.ui.ApplicationUI'
// used by the 'application' Gradle plugin
run.args( vzomeArgs )
applicationDefaultJvmArgs = [ '-Xmx3048M' ]
jvmArgs.each { entry ->
    applicationDefaultJvmArgs << "-D$entry.key=$entry.value"
}

// Not sure why the 'test' sourceSet has to be specifically declared here 
// before it will show up in the NetBeans 'Projects' window.
// It shows up in the vzome-core project without explicitly being listed.
sourceSets {
    test {
        java.srcDir file('src/test/java')
    }
}

dependencies {
//    compile group: 'com.vzome.core', name: 'vzome-core', version:'0.16.0'
    compile group: 'java3d', name: 'j3dcore', version:'1.6.0-pre12'
    compile group: 'java3d', name: 'j3dutils', version:'1.6.0-pre12'
    compile group: 'java3d', name: 'vecmath', version:'1.6.0-pre12'
    compile group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version:'2.3.2'
    compile group: 'org.jogamp.jogl', name: 'jogl-all-main', version:'2.3.2'
    compile group: 'javax.media.jai', name: 'com.springsource.javax.media.jai.core', version:'1.1.3'
    testCompile group: 'junit', name: 'junit', version:'4.12'
}

sourceSets {
    main {
        java {
            exclude 'org/vorthmann/zome/render/jogl/**'  // initial framework for a pure JOGL renderer is not ready for use
        }
        resources {
            // The convention-based default built-in srcDir is 'src/main/resources' 
            // Append any additional SrcDir entries here...
            
            // listed alphabetically
            include '**/*.gif'
            include '**/*.jpg'
            include '**/*.pdf'
            include '**/*.png'
            include '**/*.properties'
            include '**/*.py'
            include '**/*.vef'
            include '**/*.vZome'
            include '**/*.zomic'
            include '**/*.html'
            include '**/*.js'
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'vzome-desktop',
                   'Implementation-Version': project.version
    }
}

// The mainClass property is needed to run a Gradle project from the Netbeans IDE (and maybe others too).
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

def writeProjectProperties( keys, propsFile )
{
    def outputDir = propsFile .getParentFile()
    outputDir.exists() || outputDir.mkdirs()
    def buildProps = new Properties()
    project.properties.findAll( { it.key in keys } ) .each {
        buildProps .put( it.key, it.value.toString() )
    }
    def writer = new FileWriter( propsFile )
    try {
        buildProps .store( writer, null )
        writer.flush()
    } finally {
        writer.close()
    }
}

// These options apply to all java projects
// More info at http://www.javaworld.com/article/2073587/javac-s--xlint-options.html
gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs \
		<< "-Xdiags:verbose" \
		<< "-Xlint:all" \
		<< "-Xlint:cast" \
		<< "-Xlint:deprecation" \
		<< "-Xlint:divzero" \
		<< "-Xlint:empty" \
		<< "-Xlint:fallthrough" \
		<< "-Xlint:finally" \
		<< "-Xlint:overrides" \
		<< "-Xlint:path" \
		<< "-Xlint:rawtypes" \
		<< "-Xlint:unchecked" \
		<< "-Xlint:-serial" 
		// TODO: Enable the serial warning and look into fixing ~33 issues. 
		// Most of them are classes which extend a generic Collection or Exception.
	}
}
